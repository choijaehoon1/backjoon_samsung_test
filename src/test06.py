tetromino = [
    [(0,0),(0,1),(0,2),(0,3)],[(0,0),(1,0),(2,0),(3,0)], # -모형은 2가지 경우
    [(0,0),(0,1),(1,0),(1,1)], # 사각형은 1가지 경우
    # ㄴ모양은 8가지 경우(90도 회전하면서 확인 and 좌우대칭 확인)
    [(0,0),(1,0),(2,0),(2,1)],[(0,1),(1,1),(2,1),(2,0)],
    [(0,0),(1,0),(0,1),(0,2)],[(0,0),(0,1),(0,2),(1,2)],
    [(0,0),(0,1),(1,1),(2,1)],[(0,0),(0,1),(1,0),(2,0)],
    [(1,0),(1,1),(1,2),(0,2)],[(0,0),(1,0),(1,1),(1,2)],
    # ㄹ모양은 4가지 경우
    [(0,0),(1,0),(1,1),(2,1)],[(0,1),(1,1),(1,0),(2,0)],
    [(0,0),(0,1),(1,1),(1,2)],[(1,0),(1,1),(0,1),(0,2)],
    # ㅗ모양은 4가지 경우
    [(0,0),(0,1),(0,2),(1,1)],[(0,1),(1,0),(1,1),(1,2)],
    [(0,0),(1,0),(2,0),(1,1)],[(0,1),(1,1),(2,1),(1,0)],    
]

def find(x,y):
    global result
    for i in range(19):
        tmp = 0
        for j in range(4):
            nx = x + tetromino[i][j][0]
            ny = y + tetromino[i][j][1]
            if 0 <= nx < n and 0 <= ny <m:
                tmp += board[nx][ny]
            else: # 범위 벗어나는 경우는 무시
                continue                
        result = max(result,tmp)            

n,m = map(int, input().split())

board = []
for i in range(n):
    board.append(list(map(int, input().split())))

result = 0
for i in range(n):
    for j in range(m):
        find(i,j)
print(result)        
